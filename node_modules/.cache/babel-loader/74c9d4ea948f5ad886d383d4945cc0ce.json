{"ast":null,"code":"//Pasos para usar de forma optima una apikey\n// 1-Creo una variable de entorno p/ guardar mi apikey y guardo en una cte.\n// 1.1-por definicion \"process.env\" + \".REACT_APP_\" + \"APIKEY\"(el nombre q yo asigne)\n// 2-Creo un archivo \".env\" a nivel local y ahi pego mi apikey.\n\n//ACLARACION: Por requisi de React, al crear una var de entorno del lado del cliente(navegador), \n// se empieza con \".REACT_APP_\" y luego va el nombre q desee. Es la unica forma q la info llegue al navegador del cliente\n//const apiKey = process.env.REACT_APP_APIKEY; //Var de entorno SIEMPRE EN MAYUSCULA\n\n//OJOOOO: Al \"http\" q puse antes le agregue una \"s\" p/ subirlo a la web en vercel.com, asi se actualizaran las ciudades\n\n//Hago esto xq no me anda la var de entorno de arriba. Pero esta info es secreta y NUNCA debe ir en el codigo\nconst apiKey = \"5f78c1c3105c4b7c874697259ced800a\"; //Esto porque no me anda lo de arriba\nconst Swal = require('sweetalert2');\n\n//Acá hago el llamado a la API para obtener los datos de la ciudad\nexport default function fetchCity(ciudad, setData) {\n  fetch(\n  //Devuelve una PROMESA, NO UN RESULTADO. Esta implementado en el navegador, no debo instalar libreria adicional\n  `https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric` //pego esta ruta q me a responder con algo q aun no se\n  ).then(r => r.json()) //\".then\" le digo q hacer si la promesa se cumple. Recibe una rpta \"r\" y a esa rpta le aplica el metodo Jason \"r.json()\"\n  .then(recurso => {\n    // luego pasa a \"(recurso) q es todo el objeto q viene como rpta\"\n    if (recurso.main !== undefined) {\n      const ciudad = {\n        //Crea un objeto ciudad y lo agrega al estado data\n        min: Math.round(recurso.main.temp_min),\n        max: Math.round(recurso.main.temp_max),\n        img: recurso.weather[0].icon,\n        id: recurso.id,\n        wind: recurso.wind.speed,\n        temp: recurso.main.temp,\n        name: recurso.name,\n        weather: recurso.weather[0].main,\n        clouds: recurso.clouds.all,\n        latitud: recurso.coord.lat,\n        longitud: recurso.coord.lon\n      };\n      setData(oldCities => [...oldCities, ciudad]); //Aqui agrego una ciudad al estado\n    } else {\n      // alert(\"Ciudad no encontrada\");\n      Swal.fire({\n        icon: 'error',\n        title: '¡Ciudad no encontrada!',\n        width: '20em'\n      });\n    }\n  });\n}","map":{"version":3,"names":["apiKey","Swal","require","fetchCity","ciudad","setData","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","fire","title","width"],"sources":["C:/Users/Usuario/Desktop/2.WeatherApp_Mio/weather-app/src/services/fetchCity.js"],"sourcesContent":["//Pasos para usar de forma optima una apikey\r\n  // 1-Creo una variable de entorno p/ guardar mi apikey y guardo en una cte.\r\n    // 1.1-por definicion \"process.env\" + \".REACT_APP_\" + \"APIKEY\"(el nombre q yo asigne)\r\n  // 2-Creo un archivo \".env\" a nivel local y ahi pego mi apikey.\r\n\r\n  //ACLARACION: Por requisi de React, al crear una var de entorno del lado del cliente(navegador), \r\n  // se empieza con \".REACT_APP_\" y luego va el nombre q desee. Es la unica forma q la info llegue al navegador del cliente\r\n//const apiKey = process.env.REACT_APP_APIKEY; //Var de entorno SIEMPRE EN MAYUSCULA\r\n\r\n\r\n//OJOOOO: Al \"http\" q puse antes le agregue una \"s\" p/ subirlo a la web en vercel.com, asi se actualizaran las ciudades\r\n\r\n//Hago esto xq no me anda la var de entorno de arriba. Pero esta info es secreta y NUNCA debe ir en el codigo\r\nconst apiKey = \"5f78c1c3105c4b7c874697259ced800a\"; //Esto porque no me anda lo de arriba\r\nconst Swal = require('sweetalert2')\r\n\r\n\r\n//Acá hago el llamado a la API para obtener los datos de la ciudad\r\nexport default function fetchCity(ciudad, setData) {\r\n    fetch ( //Devuelve una PROMESA, NO UN RESULTADO. Esta implementado en el navegador, no debo instalar libreria adicional\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric` //pego esta ruta q me a responder con algo q aun no se\r\n)\r\n    .then(r => r.json()) //\".then\" le digo q hacer si la promesa se cumple. Recibe una rpta \"r\" y a esa rpta le aplica el metodo Jason \"r.json()\"\r\n    .then((recurso) => { // luego pasa a \"(recurso) q es todo el objeto q viene como rpta\"\r\n        if(recurso.main !== undefined){\r\n        const ciudad = { //Crea un objeto ciudad y lo agrega al estado data\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n        };\r\n        setData(oldCities => [...oldCities, ciudad]);//Aqui agrego una ciudad al estado\r\n        } else {\r\n            // alert(\"Ciudad no encontrada\");\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: '¡Ciudad no encontrada!',\r\n                width: '20em', \r\n                \r\n            })\r\n        }\r\n    });  \r\n}\r\n"],"mappings":"AAAA;AACE;AACE;AACF;;AAEA;AACA;AACF;;AAGA;;AAEA;AACA,MAAMA,MAAM,GAAG,kCAAkC,CAAC,CAAC;AACnD,MAAMC,IAAI,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAGnC;AACA,eAAe,SAASC,SAAS,CAACC,MAAM,EAAEC,OAAO,EAAE;EAC/CC,KAAK;EAAG;EACP,qDAAoDF,MAAO,UAASJ,MAAO,eAAc,CAAC;EAAA,CAC9F,CACIO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,EAAE,CAAC,CAAC;EAAA,CACpBF,IAAI,CAAEG,OAAO,IAAK;IAAE;IACjB,IAAGA,OAAO,CAACC,IAAI,KAAKC,SAAS,EAAC;MAC9B,MAAMR,MAAM,GAAG;QAAE;QACbS,GAAG,EAAEC,IAAI,CAACC,KAAK,CAACL,OAAO,CAACC,IAAI,CAACK,QAAQ,CAAC;QACtCC,GAAG,EAAEH,IAAI,CAACC,KAAK,CAACL,OAAO,CAACC,IAAI,CAACO,QAAQ,CAAC;QACtCC,GAAG,EAAET,OAAO,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;QAC5BC,EAAE,EAAEZ,OAAO,CAACY,EAAE;QACdC,IAAI,EAAEb,OAAO,CAACa,IAAI,CAACC,KAAK;QACxBC,IAAI,EAAEf,OAAO,CAACC,IAAI,CAACc,IAAI;QACvBC,IAAI,EAAEhB,OAAO,CAACgB,IAAI;QAClBN,OAAO,EAAEV,OAAO,CAACU,OAAO,CAAC,CAAC,CAAC,CAACT,IAAI;QAChCgB,MAAM,EAAEjB,OAAO,CAACiB,MAAM,CAACC,GAAG;QAC1BC,OAAO,EAAEnB,OAAO,CAACoB,KAAK,CAACC,GAAG;QAC1BC,QAAQ,EAAEtB,OAAO,CAACoB,KAAK,CAACG;MAC5B,CAAC;MACD5B,OAAO,CAAC6B,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAE9B,MAAM,CAAC,CAAC,CAAC;IAC7C,CAAC,MAAM;MACH;MACAH,IAAI,CAACkC,IAAI,CAAC;QACNd,IAAI,EAAE,OAAO;QACbe,KAAK,EAAE,wBAAwB;QAC/BC,KAAK,EAAE;MAEX,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module"}
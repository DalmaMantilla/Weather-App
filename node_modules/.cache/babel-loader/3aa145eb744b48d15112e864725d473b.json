{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dal\\\\Desktop\\\\FT-M2-Hecho\\\\08-React-Estado-LifeCycle\\\\homework\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Card from './components/Card.jsx';\nimport Cards from './components/Cards.jsx';\nimport SearchBar from './components/SearchBar.jsx';\nimport { Cairns } from './data.js';\nimport styles from \"./App.module.css\"; //Traigo la imagen de fondo\n//Pasos para usar de forma optima una apikey\n// 1-Creo una variable de entorno p/ guardar mi apikey y guardo en una cte.\n// 1.1-por definicion \"process.env\" + \".REACT_APP_\" + \"APIKEY\"(el nombre q yo asigne)\n// 2-Creo un archivo \".env\" a nivel local y ahi pego mi apikey.\n//ACLARACION: Por requisi de React, al crear una var de entorno del lado del cliente(navegador), \n// se empieza con \".REACT_APP_\" y luego va el nombre q desee. Es la unica forma q la info llegue al navegador del cliente\n//const apiKey = process.env.REACT_APP_APIKEY; //Var de entorno SIEMPRE EN MAYUSCULA\n//Hago esto xq no me anda la var de entorno de arriba. Pero esta info es secreta y NUNCA debe ir en el codigo\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"5f78c1c3105c4b7c874697259ced800a\"; //Esto porque no me anda lo de arriba\n\nfunction App() {\n  _s();\n\n  const [data, setData] = React.useState([]);\n\n  function onSearch(ciudad) {\n    //Acá hago el llamado a la API para obtener los datos de la ciudad\n    fetch( //Devuelve una PROMESA, NO UN RESULTADO. Esta implementado en el navegador, no debo instalar libreria adicional\n    `http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric` //pego esta ruta q me a responder con algo q aun no se\n    ).then(r => r.json()) //\".then\" le digo q hacer si la promesa se cumple. Recibe una rpta \"r\" y a esa rpta le aplica el metodo Jason \"r.json()\"\n    .then(recurso => {\n      // luego pasa a \"(recurso) q es todo el objeto q viene como rpta\"\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          //Crea un objeto ciudad y lo agrega al estado cities\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setData(oldCities => [...oldCities, ciudad]); //con esto, agrego al estado una ciudad\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function handleOnClose(id) {\n    //funcion q elimina una Card(Ciudad) del array\n    setData(prevData => {\n      return prevData.filter(city => city.id !== id);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.app,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.bkg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: onSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.citiesContainer,\n        children: [data.length > 0 &&\n        /*#__PURE__*/\n\n        /*Si array tiene mas de una ciudad, renderiza Card y sus comp, \r\n        Esta condicion deja en esta Card la ultima ciudad buscada*/\n        _jsxDEV(Card, {\n          primary: true\n          /*React asigna el valor true x defecto, no hace falta asignar*/\n          ,\n          max: data[data.length - 1].max //Acceden al ultimo elemento del array\n          ,\n          min: data[data.length - 1].min,\n          name: data[data.length - 1].name,\n          img: data[data.length - 1].img //onClose={() => alert(Cairns.name)} //No tiene, por eso lo comento\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Cards, {\n          cities: data,\n          onClose: id => handleOnClose(id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Dal/Desktop/FT-M2-Hecho/08-React-Estado-LifeCycle/homework/src/App.js"],"names":["React","Card","Cards","SearchBar","Cairns","styles","apiKey","App","data","setData","useState","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert","handleOnClose","prevData","filter","city","app","bkg","container","citiesContainer","length"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\n\r\nimport Card from './components/Card.jsx';\r\nimport Cards from './components/Cards.jsx';\r\nimport SearchBar from './components/SearchBar.jsx';\r\nimport { Cairns } from './data.js';\r\n\r\nimport styles from \"./App.module.css\" //Traigo la imagen de fondo\r\n\r\n\r\n  \r\n//Pasos para usar de forma optima una apikey\r\n  // 1-Creo una variable de entorno p/ guardar mi apikey y guardo en una cte.\r\n    // 1.1-por definicion \"process.env\" + \".REACT_APP_\" + \"APIKEY\"(el nombre q yo asigne)\r\n  // 2-Creo un archivo \".env\" a nivel local y ahi pego mi apikey.\r\n\r\n  //ACLARACION: Por requisi de React, al crear una var de entorno del lado del cliente(navegador), \r\n  // se empieza con \".REACT_APP_\" y luego va el nombre q desee. Es la unica forma q la info llegue al navegador del cliente\r\n//const apiKey = process.env.REACT_APP_APIKEY; //Var de entorno SIEMPRE EN MAYUSCULA\r\n\r\n\r\n//Hago esto xq no me anda la var de entorno de arriba. Pero esta info es secreta y NUNCA debe ir en el codigo\r\nconst apiKey = \"5f78c1c3105c4b7c874697259ced800a\"; //Esto porque no me anda lo de arriba\r\n\r\n\r\nfunction App() {\r\n  const [data, setData] = React.useState([]);\r\n\r\n  function onSearch(ciudad) {\r\n    //Acá hago el llamado a la API para obtener los datos de la ciudad\r\n    fetch ( //Devuelve una PROMESA, NO UN RESULTADO. Esta implementado en el navegador, no debo instalar libreria adicional\r\n    `http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric` //pego esta ruta q me a responder con algo q aun no se\r\n    )\r\n      .then(r => r.json()) //\".then\" le digo q hacer si la promesa se cumple. Recibe una rpta \"r\" y a esa rpta le aplica el metodo Jason \"r.json()\"\r\n      .then((recurso) => { // luego pasa a \"(recurso) q es todo el objeto q viene como rpta\"\r\n        if(recurso.main !== undefined){\r\n          const ciudad = { //Crea un objeto ciudad y lo agrega al estado cities\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          setData(oldCities => [...oldCities, ciudad]);//con esto, agrego al estado una ciudad\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });  \r\n    }\r\n\r\n  function handleOnClose(id) { //funcion q elimina una Card(Ciudad) del array\r\n    setData(prevData => {\r\n      return  prevData.filter(city => city.id !== id)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className={styles.app}> {/*imagen de fondo total*/}\r\n      <div className={styles.bkg}/> {/*imagen q va en el medio (borrosa)*/}\r\n      <div className={styles.container}>\r\n        <div>\r\n          <SearchBar onSearch={onSearch} /> {/*..o pasarle la ciudad directamente,  */}\r\n          {/*<SearchBar onSearch={(ciudad) => onSearch(ciudad)} /> --> ..puedo hacer esto..*/} \r\n        </div>    \r\n        <div className={styles.citiesContainer}>\r\n          {/*Es la Card grande solita*/}\r\n          {data.length > 0 && /*Si array tiene mas de una ciudad, renderiza Card y sus comp, \r\n          Esta condicion deja en esta Card la ultima ciudad buscada*/\r\n            <Card \r\n              primary/*React asigna el valor true x defecto, no hace falta asignar*/\r\n              max={data[data.length-1].max} //Acceden al ultimo elemento del array\r\n              min={data[data.length-1].min}\r\n              name={data[data.length-1].name}\r\n              img={data[data.length-1].img}\r\n              //onClose={() => alert(Cairns.name)} //No tiene, por eso lo comento\r\n            />}\r\n          <Cards \r\n            cities={data} \r\n            onClose={(id) => handleOnClose(id)} \r\n          />   \r\n        </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
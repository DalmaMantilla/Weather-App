{"ast":null,"code":"//Pasos para usar de forma optima una apikey\n// 1-Creo una variable de entorno p/ guardar mi apikey y guardo en una cte.\n// 1.1-por definicion \"process.env\" + \".REACT_APP_\" + \"APIKEY\"(el nombre q yo asigne)\n// 2-Creo un archivo \".env\" a nivel local y ahi pego mi apikey.\n//ACLARACION: Por requisi de React, al crear una var de entorno del lado del cliente(navegador), \n// se empieza con \".REACT_APP_\" y luego va el nombre q desee. Es la unica forma q la info llegue al navegador del cliente\n//const apiKey = process.env.REACT_APP_APIKEY; //Var de entorno SIEMPRE EN MAYUSCULA\n//OJOOOO: Al \"http\" q puse antes le agregue una \"s\" p/ subirlo a la web en vercel.com, asi se actualizaran las ciudades\n//Hago esto xq no me anda la var de entorno de arriba. Pero esta info es secreta y NUNCA debe ir en el codigo\nconst apiKey = \"5f78c1c3105c4b7c874697259ced800a\"; //Esto porque no me anda lo de arriba\n//Acá hago el llamado a la API para obtener los datos de la ciudad\n\nexport default function fetchCity(ciudad, setData) {\n  fetch( //Devuelve una PROMESA, NO UN RESULTADO. Esta implementado en el navegador, no debo instalar libreria adicional\n  `https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric` //pego esta ruta q me a responder con algo q aun no se\n  ).then(r => r.json()) //\".then\" le digo q hacer si la promesa se cumple. Recibe una rpta \"r\" y a esa rpta le aplica el metodo Jason \"r.json()\"\n  .then(recurso => {\n    // luego pasa a \"(recurso) q es todo el objeto q viene como rpta\"\n    if (recurso.main !== undefined) {\n      const ciudad = {\n        //Crea un objeto ciudad y lo agrega al estado data\n        min: Math.round(recurso.main.temp_min),\n        max: Math.round(recurso.main.temp_max),\n        img: recurso.weather[0].icon,\n        id: recurso.id,\n        wind: recurso.wind.speed,\n        temp: recurso.main.temp,\n        name: recurso.name,\n        weather: recurso.weather[0].main,\n        clouds: recurso.clouds.all,\n        latitud: recurso.coord.lat,\n        longitud: recurso.coord.lon\n      };\n      setData(oldCities => [...oldCities, ciudad]); //Aqui agrego una ciudad al estado\n    } else {\n      alert(\"Ciudad no encontrada\");\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Dal/Desktop/FT-M2-Hecho/08-React-Estado-LifeCycle/homework/src/services/fetchCity.js"],"names":["apiKey","fetchCity","ciudad","setData","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert"],"mappings":"AAAA;AACE;AACE;AACF;AAEA;AACA;AACF;AAGA;AAEA;AACA,MAAMA,MAAM,GAAG,kCAAf,C,CAAmD;AAInD;;AACA,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AAC/CC,EAAAA,KAAK,EAAG;AACP,uDAAoDF,MAAO,UAASF,MAAO,eADvE,CACsF;AADtF,GAAL,CAGCK,IAHD,CAGMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAHX,EAGqB;AAHrB,GAICF,IAJD,CAIOG,OAAD,IAAa;AAAE;AACjB,QAAGA,OAAO,CAACC,IAAR,KAAiBC,SAApB,EAA8B;AAC9B,YAAMR,MAAM,GAAG;AAAE;AACbS,QAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaK,QAAxB,CADM;AAEXC,QAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaO,QAAxB,CAFM;AAGXC,QAAAA,GAAG,EAAET,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBC,IAHb;AAIXC,QAAAA,EAAE,EAAEZ,OAAO,CAACY,EAJD;AAKXC,QAAAA,IAAI,EAAEb,OAAO,CAACa,IAAR,CAAaC,KALR;AAMXC,QAAAA,IAAI,EAAEf,OAAO,CAACC,IAAR,CAAac,IANR;AAOXC,QAAAA,IAAI,EAAEhB,OAAO,CAACgB,IAPH;AAQXN,QAAAA,OAAO,EAAEV,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBT,IARjB;AASXgB,QAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,CAAeC,GATZ;AAUXC,QAAAA,OAAO,EAAEnB,OAAO,CAACoB,KAAR,CAAcC,GAVZ;AAWXC,QAAAA,QAAQ,EAAEtB,OAAO,CAACoB,KAAR,CAAcG;AAXb,OAAf;AAaA5B,MAAAA,OAAO,CAAC6B,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe9B,MAAf,CAAd,CAAP,CAd8B,CAce;AAC5C,KAfD,MAeO;AACH+B,MAAAA,KAAK,CAAC,sBAAD,CAAL;AACH;AACJ,GAvBD;AAwBH","sourcesContent":["//Pasos para usar de forma optima una apikey\r\n  // 1-Creo una variable de entorno p/ guardar mi apikey y guardo en una cte.\r\n    // 1.1-por definicion \"process.env\" + \".REACT_APP_\" + \"APIKEY\"(el nombre q yo asigne)\r\n  // 2-Creo un archivo \".env\" a nivel local y ahi pego mi apikey.\r\n\r\n  //ACLARACION: Por requisi de React, al crear una var de entorno del lado del cliente(navegador), \r\n  // se empieza con \".REACT_APP_\" y luego va el nombre q desee. Es la unica forma q la info llegue al navegador del cliente\r\n//const apiKey = process.env.REACT_APP_APIKEY; //Var de entorno SIEMPRE EN MAYUSCULA\r\n\r\n\r\n//OJOOOO: Al \"http\" q puse antes le agregue una \"s\" p/ subirlo a la web en vercel.com, asi se actualizaran las ciudades\r\n\r\n//Hago esto xq no me anda la var de entorno de arriba. Pero esta info es secreta y NUNCA debe ir en el codigo\r\nconst apiKey = \"5f78c1c3105c4b7c874697259ced800a\"; //Esto porque no me anda lo de arriba\r\n\r\n\r\n\r\n//Acá hago el llamado a la API para obtener los datos de la ciudad\r\nexport default function fetchCity(ciudad, setData) {\r\n    fetch ( //Devuelve una PROMESA, NO UN RESULTADO. Esta implementado en el navegador, no debo instalar libreria adicional\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric` //pego esta ruta q me a responder con algo q aun no se\r\n)\r\n    .then(r => r.json()) //\".then\" le digo q hacer si la promesa se cumple. Recibe una rpta \"r\" y a esa rpta le aplica el metodo Jason \"r.json()\"\r\n    .then((recurso) => { // luego pasa a \"(recurso) q es todo el objeto q viene como rpta\"\r\n        if(recurso.main !== undefined){\r\n        const ciudad = { //Crea un objeto ciudad y lo agrega al estado data\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n        };\r\n        setData(oldCities => [...oldCities, ciudad]);//Aqui agrego una ciudad al estado\r\n        } else {\r\n            alert(\"Ciudad no encontrada\");\r\n        }\r\n    });  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}
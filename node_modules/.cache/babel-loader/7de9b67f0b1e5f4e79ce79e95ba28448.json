{"ast":null,"code":"// import React, { useState } from 'react'; //Se agregó el { useState } traje mi hook para usar\n// import './App.css';\n// import Nav from './components/Nav.jsx';\n// import Cards from './components/Cards.jsx';\n// export default function App() {\n//   const [cities, setCities] = useState([]);\n//   const apiKey = '4ae2636d8dfbdc3044bede63951a019b' // -> Es confidencial, no usar una cte, si una variable de entorno\n//   function onSearch(ciudad) {\n//     //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad(pegue la Api)\n//     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n//       .then(r => r.json())\n//       .then((recurso) => {\n//         if(recurso.main !== undefined){\n//           const ciudad = { //Crea un objeto ciudad y lo agrega al estado cities\n//             min: Math.round(recurso.main.temp_min),\n//             max: Math.round(recurso.main.temp_max),\n//             img: recurso.weather[0].icon,\n//             id: recurso.id,\n//             wind: recurso.wind.speed,\n//             temp: recurso.main.temp,\n//             name: recurso.name,\n//             weather: recurso.weather[0].main,\n//             clouds: recurso.clouds.all,\n//             latitud: recurso.coord.lat,\n//             longitud: recurso.coord.lon\n//           };\n//           setCities(oldCities => [...oldCities, ciudad]);\n//         } else {\n//           alert(\"Ciudad no encontrada\");\n//         }\n//       });\n//     }\n//     function onClose(id) {\n//       setCities(oldCities => oldCities.filter(c => c.id !== id));\n//     }\n//   return ( //explicado en mi cuaderno\n//     <div className=\"App\">\n//       <Nav onSearch={onSearch}/>\n//       <Cards cities={cities} onClose={onClose} />\n//     </div>\n//   );\n// }\n//--------------------------------HOMEWORK HECHO POR FEDE PANELA-----------------------------\n//--------------------------------HOMEWORK HECHO POR DIEGO RODRIGUEZ-----------------------------\n// import React from 'react';\n// import Card from \"./components/Card.jsx\";\n// import Cards from \"./components/Cards.jsx\";\n// import SearchBar from './components/SearchBar.jsx';\n// import data, { cairns } from \"./data.jsx\";\n// import styles from \"./App.module.css\"\n//   //const apiKey = '2f47152f1c107a8b4f0d7b058cb65e6d' -> Es confidencial, NUNCA usar conste, si una variable de entorno\n//   //Variable de entorno para guardar mi apikey\n//   const apiKey = process.env.REACT_APP_APIKEY; \n//   function onSearch(ciudad) {\n//     //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad(pegue la Api)\n//     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n//       .then(r => r.json())\n//       .then((recurso) => {\n//         if(recurso.main !== undefined){\n//           // const ciudad = { //Crea un objeto ciudad y lo agrega al estado cities\n//           //   min: Math.round(recurso.main.temp_min),\n//           //   max: Math.round(recurso.main.temp_max),\n//           //   img: recurso.weather[0].icon,\n//           //   id: recurso.id,\n//           //   wind: recurso.wind.speed,\n//           //   temp: recurso.main.temp,\n//           //   name: recurso.name,\n//           //   weather: recurso.weather[0].main,\n//           //   clouds: recurso.clouds.all,\n//           //   latitud: recurso.coord.lat,\n//           //   longitud: recurso.coord.lon\n//           // };\n//           //setCities(oldCities => [...oldCities, ciudad]);\n//         } else {\n//           alert(\"Ciudad no encontrada\");\n//         }\n//       });  \n//     }\n// function App(){\n//   return (\n//     <div className={styles.app}>\n//       <div className={styles.bkg} />\n//       <div className={styles.container}>\n//         <div>\n//           {/*<SearchBar onSearch={(ciudad) => alert(ciudad)} /> --> recibe ciudad y le pasa ciudad = q la funcion onsearch q esta arriba, entonces borro y paso directamente la funcion onSearch*/}\n//           <SearchBar onSearch={onSearch} /> {/*No la estoy instanciando, solo le paso */}\n//         </div>\n//         <div className={styles.citiesContainer}>\n//           <Card \n//             primary \n//             max={Cairns.main.temp_max}\n//             min={Cairns.main.temp_min}\n//             name={Cairns.name}\n//             img={Cairns.weather[0].icon}\n//             onClose={() => alert(Cairns.name)}\n//           />\n//           <Cards cities={data}/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;","map":{"version":3,"sources":["C:/Users/Dal/Desktop/FT-M2-Hecho/08-React-Estado-LifeCycle/homework/src/App.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState } from 'react'; //Se agregó el { useState } traje mi hook para usar\r\n// import './App.css';\r\n// import Nav from './components/Nav.jsx';\r\n// import Cards from './components/Cards.jsx';\r\n\r\n\r\n// export default function App() {\r\n//   const [cities, setCities] = useState([]);\r\n\r\n//   const apiKey = '4ae2636d8dfbdc3044bede63951a019b' // -> Es confidencial, no usar una cte, si una variable de entorno\r\n  \r\n//   function onSearch(ciudad) {\r\n//     //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad(pegue la Api)\r\n//     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\r\n//       .then(r => r.json())\r\n//       .then((recurso) => {\r\n//         if(recurso.main !== undefined){\r\n//           const ciudad = { //Crea un objeto ciudad y lo agrega al estado cities\r\n//             min: Math.round(recurso.main.temp_min),\r\n//             max: Math.round(recurso.main.temp_max),\r\n//             img: recurso.weather[0].icon,\r\n//             id: recurso.id,\r\n//             wind: recurso.wind.speed,\r\n//             temp: recurso.main.temp,\r\n//             name: recurso.name,\r\n//             weather: recurso.weather[0].main,\r\n//             clouds: recurso.clouds.all,\r\n//             latitud: recurso.coord.lat,\r\n//             longitud: recurso.coord.lon\r\n//           };\r\n//           setCities(oldCities => [...oldCities, ciudad]);\r\n//         } else {\r\n//           alert(\"Ciudad no encontrada\");\r\n//         }\r\n//       });\r\n  \r\n//     }\r\n\r\n//     function onClose(id) {\r\n//       setCities(oldCities => oldCities.filter(c => c.id !== id));\r\n//     }\r\n  \r\n//   return ( //explicado en mi cuaderno\r\n//     <div className=\"App\">\r\n//       <Nav onSearch={onSearch}/>\r\n//       <Cards cities={cities} onClose={onClose} />\r\n//     </div>\r\n//   );\r\n// }\r\n//--------------------------------HOMEWORK HECHO POR FEDE PANELA-----------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n//--------------------------------HOMEWORK HECHO POR DIEGO RODRIGUEZ-----------------------------\r\n\r\n// import React from 'react';\r\n// import Card from \"./components/Card.jsx\";\r\n// import Cards from \"./components/Cards.jsx\";\r\n// import SearchBar from './components/SearchBar.jsx';\r\n// import data, { cairns } from \"./data.jsx\";\r\n\r\n// import styles from \"./App.module.css\"\r\n\r\n//   //const apiKey = '2f47152f1c107a8b4f0d7b058cb65e6d' -> Es confidencial, NUNCA usar conste, si una variable de entorno\r\n  \r\n//   //Variable de entorno para guardar mi apikey\r\n//   const apiKey = process.env.REACT_APP_APIKEY; \r\n\r\n//   function onSearch(ciudad) {\r\n//     //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad(pegue la Api)\r\n//     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\r\n//       .then(r => r.json())\r\n//       .then((recurso) => {\r\n//         if(recurso.main !== undefined){\r\n//           // const ciudad = { //Crea un objeto ciudad y lo agrega al estado cities\r\n//           //   min: Math.round(recurso.main.temp_min),\r\n//           //   max: Math.round(recurso.main.temp_max),\r\n//           //   img: recurso.weather[0].icon,\r\n//           //   id: recurso.id,\r\n//           //   wind: recurso.wind.speed,\r\n//           //   temp: recurso.main.temp,\r\n//           //   name: recurso.name,\r\n//           //   weather: recurso.weather[0].main,\r\n//           //   clouds: recurso.clouds.all,\r\n//           //   latitud: recurso.coord.lat,\r\n//           //   longitud: recurso.coord.lon\r\n//           // };\r\n//           //setCities(oldCities => [...oldCities, ciudad]);\r\n//         } else {\r\n//           alert(\"Ciudad no encontrada\");\r\n//         }\r\n//       });  \r\n//     }\r\n\r\n\r\n// function App(){\r\n//   return (\r\n//     <div className={styles.app}>\r\n//       <div className={styles.bkg} />\r\n//       <div className={styles.container}>\r\n//         <div>\r\n//           {/*<SearchBar onSearch={(ciudad) => alert(ciudad)} /> --> recibe ciudad y le pasa ciudad = q la funcion onsearch q esta arriba, entonces borro y paso directamente la funcion onSearch*/}\r\n//           <SearchBar onSearch={onSearch} /> {/*No la estoy instanciando, solo le paso */}\r\n\r\n//         </div>\r\n//         <div className={styles.citiesContainer}>\r\n//           <Card \r\n//             primary \r\n//             max={Cairns.main.temp_max}\r\n//             min={Cairns.main.temp_min}\r\n//             name={Cairns.name}\r\n//             img={Cairns.weather[0].icon}\r\n//             onClose={() => alert(Cairns.name)}\r\n//           />\r\n//           <Cards cities={data}/>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}
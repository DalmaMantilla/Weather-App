{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dal\\\\Desktop\\\\FT-M2-Hecho\\\\08-React-Estado-LifeCycle\\\\homework\\\\src\\\\App.js\";\nimport React from 'react';\nimport Card from './components/Card.jsx';\nimport Cards from './components/Cards.jsx';\nimport SearchBar from './components/SearchBar.jsx';\nimport data, { Cairns } from './data.js';\nimport styles from \"./App.module.css\"; //Traigo la imagen de fondo\n//const apiKey = '2f47152f1c107a8b4f0d7b058cb65e6d' -> Es confidencial, NUNCA usar conste, si una variable de entorno\n//Variable de entorno para guardar mi apikey\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = process.env.REACT_APP_APIKEY;\n\nfunction onSearch(ciudad) {\n  //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad(pegue la Api)\n  fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n    if (recurso.main !== undefined) {\n      const ciudad = {\n        //Crea un objeto ciudad y lo agrega al estado cities\n        min: Math.round(recurso.main.temp_min),\n        max: Math.round(recurso.main.temp_max),\n        img: recurso.weather[0].icon,\n        id: recurso.id,\n        wind: recurso.wind.speed,\n        temp: recurso.main.temp,\n        name: recurso.name,\n        weather: recurso.weather[0].main,\n        clouds: recurso.clouds.all,\n        latitud: recurso.coord.lat,\n        longitud: recurso.coord.lon\n      }; //setCities(oldCities => [...oldCities, ciudad]);\n    } else {\n      alert(\"Ciudad no encontrada\");\n    }\n  });\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.app,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.bkg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: onSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.citiesContainer,\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          primary: true\n          /*Solo con mencionarla React asigna el valor true */\n          ,\n          max: Cairns.main.temp_max,\n          min: Cairns.main.temp_min,\n          name: Cairns.name,\n          img: Cairns.weather[0].icon,\n          onClose: () => alert(Cairns.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Cards, {\n          cities: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Dal/Desktop/FT-M2-Hecho/08-React-Estado-LifeCycle/homework/src/App.js"],"names":["React","Card","Cards","SearchBar","data","Cairns","styles","apiKey","process","env","REACT_APP_APIKEY","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert","App","app","bkg","container","citiesContainer"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,IAAP,IAAeC,MAAf,QAA6B,WAA7B;AAEA,OAAOC,MAAP,MAAmB,kBAAnB,C,CAAsC;AAKtC;AAEA;;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,gBAA3B;;AAEA,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACxB;AACAC,EAAAA,KAAK,CAAE,oDAAmDD,MAAO,UAASL,MAAO,eAA5E,CAAL,CACGO,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGF,IAFH,CAESG,OAAD,IAAa;AACjB,QAAGA,OAAO,CAACC,IAAR,KAAiBC,SAApB,EAA8B;AAC5B,YAAMP,MAAM,GAAG;AAAE;AACfQ,QAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaK,QAAxB,CADQ;AAEbC,QAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaO,QAAxB,CAFQ;AAGbC,QAAAA,GAAG,EAAET,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBC,IAHX;AAIbC,QAAAA,EAAE,EAAEZ,OAAO,CAACY,EAJC;AAKbC,QAAAA,IAAI,EAAEb,OAAO,CAACa,IAAR,CAAaC,KALN;AAMbC,QAAAA,IAAI,EAAEf,OAAO,CAACC,IAAR,CAAac,IANN;AAObC,QAAAA,IAAI,EAAEhB,OAAO,CAACgB,IAPD;AAQbN,QAAAA,OAAO,EAAEV,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBT,IARf;AASbgB,QAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,CAAeC,GATV;AAUbC,QAAAA,OAAO,EAAEnB,OAAO,CAACoB,KAAR,CAAcC,GAVV;AAWbC,QAAAA,QAAQ,EAAEtB,OAAO,CAACoB,KAAR,CAAcG;AAXX,OAAf,CAD4B,CAc5B;AACD,KAfD,MAeO;AACLC,MAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AACF,GArBH;AAsBC;;AAKH,SAASC,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAEpC,MAAM,CAACqC,GAAvB;AAAA,iCACE;AAAK,MAAA,SAAS,EAAErC,MAAM,CAACsC;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,oBAEE;AAAK,MAAA,SAAS,EAAEtC,MAAM,CAACuC,SAAvB;AAAA,8BACE;AAAA,gCACE,QAAC,SAAD;AAAW,UAAA,QAAQ,EAAElC;AAArB;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAEL,MAAM,CAACwC,eAAvB;AAAA,gCACE,QAAC,IAAD;AACE,UAAA,OAAO;AAAC;AADV;AAEE,UAAA,GAAG,EAAEzC,MAAM,CAACa,IAAP,CAAYO,QAFnB;AAGE,UAAA,GAAG,EAAEpB,MAAM,CAACa,IAAP,CAAYK,QAHnB;AAIE,UAAA,IAAI,EAAElB,MAAM,CAAC4B,IAJf;AAKE,UAAA,GAAG,EAAE5B,MAAM,CAACsB,OAAP,CAAe,CAAf,EAAkBC,IALzB;AAME,UAAA,OAAO,EAAE,MAAMa,KAAK,CAACpC,MAAM,CAAC4B,IAAR;AANtB;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,KAAD;AAAO,UAAA,MAAM,EAAE7B;AAAf;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;KAvBQsC,G;AAyBT,eAAeA,GAAf","sourcesContent":["\r\nimport React from 'react';\r\n\r\nimport Card from './components/Card.jsx';\r\nimport Cards from './components/Cards.jsx';\r\nimport SearchBar from './components/SearchBar.jsx';\r\nimport data, { Cairns } from './data.js';\r\n\r\nimport styles from \"./App.module.css\" //Traigo la imagen de fondo\r\n\r\n\r\n\r\n  \r\n//const apiKey = '2f47152f1c107a8b4f0d7b058cb65e6d' -> Es confidencial, NUNCA usar conste, si una variable de entorno\r\n  \r\n//Variable de entorno para guardar mi apikey\r\nconst apiKey = process.env.REACT_APP_APIKEY; \r\n\r\nfunction onSearch(ciudad) {\r\n  //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad(pegue la Api)\r\n  fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\r\n    .then(r => r.json())\r\n    .then((recurso) => {\r\n      if(recurso.main !== undefined){\r\n        const ciudad = { //Crea un objeto ciudad y lo agrega al estado cities\r\n          min: Math.round(recurso.main.temp_min),\r\n          max: Math.round(recurso.main.temp_max),\r\n          img: recurso.weather[0].icon,\r\n          id: recurso.id,\r\n          wind: recurso.wind.speed,\r\n          temp: recurso.main.temp,\r\n          name: recurso.name,\r\n          weather: recurso.weather[0].main,\r\n          clouds: recurso.clouds.all,\r\n          latitud: recurso.coord.lat,\r\n          longitud: recurso.coord.lon\r\n        };\r\n        //setCities(oldCities => [...oldCities, ciudad]);\r\n      } else {\r\n        alert(\"Ciudad no encontrada\");\r\n      }\r\n    });  \r\n  }\r\n\r\n\r\n    \r\n    \r\nfunction App() {\r\n  return (\r\n    <div className={styles.app}> {/*imagen de fondo total*/}\r\n      <div className={styles.bkg}/> {/*imagen q va en el medio (borrosa)*/}\r\n      <div className={styles.container}>\r\n        <div>\r\n          <SearchBar onSearch={onSearch} /> {/*..o pasarle la ciudad directamente,  */}\r\n          {/*<SearchBar onSearch={(ciudad) => onSearch(ciudad)} /> --> ..puedo hacer esto..*/} \r\n        </div>    \r\n        <div className={styles.citiesContainer}>\r\n          <Card\r\n            primary /*Solo con mencionarla React asigna el valor true */\r\n            max={Cairns.main.temp_max}\r\n            min={Cairns.main.temp_min}\r\n            name={Cairns.name}\r\n            img={Cairns.weather[0].icon}\r\n            onClose={() => alert(Cairns.name)}\r\n          />\r\n          <Cards cities={data} />   \r\n        </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}